plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	flatDir { dirs 'libs' }

	maven { url "https://maven.fabricmc.net/" }
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://cursemaven.com/" }
	maven { url "https://maven.wispforest.io/releases/" }
	maven { url "https://maven.ladysnake.org/releases" }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com" }
	maven { url "https://jitpack.io/" }
}

dependencies {
	// Minecraft
	minecraft ("com.mojang:minecraft:${project.minecraft_version}")
	mappings ("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	
	// Fabric
	modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")
	modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	// OwO Lib
	modImplementation ("io.wispforest:owo-lib:${project.owo_version}")
	include ("io.wispforest:owo-sentinel:${project.owo_version}")

	// Cloth Config
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
  	}
	
	// Mod Menu
	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Create: Numismatics
	modImplementation("maven.modrinth:numismatics:${project.numismatics_version}")
	include("maven.modrinth:numismatics:${project.numismatics_version}")

	// Furniture Refurbished
	modApi("curse.maven:refurbished-furniture-897116:${project.refurbished_furniture_version}")
}

fabricApi {
    configureDataGeneration()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

loom {
	remapJar {
		// Remap mod dependencies using different mappings.
		sourceNamespace.set("intermediary")
		targetNamespace.set("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for retrieving dependencies.
	}
}